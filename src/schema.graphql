# import * from './schema_prep.graphql'

type SuccessMessage {
    message: String
}

type Mutation {
    createUser(name: String): User!
    registerUser(email: String!, password: String!, name: String!): User!
    login(email: String!, password: String!): User!
    logout: SuccessMessage
    createAdvCom(
        index: Int
        headshot: String
        name: String
        jobTitle: String
        company: String
    ): AdvCom!

    updateAdvCom(
        id: ID!
        index: Int
        headshot: String
        name: String
        jobTitle: String
        company: String
    ): AdvCom

    deleteAdvCom(id: ID!): AdvCom

    createSponsor(
        name: String!
        ranking: String!
        index: Int!
        logo: String!
        description: String!
        website: String
        instagram: String
        facebook: String
        twitter: String
        linkedIn: String
        frontpage: Boolean
    ): Sponsor!

    updateSponsor(
        id: ID!
        name: String!
        ranking: String!
        index: Int!
        logo: String!
        description: String!
        website: String
        instagram: String
        facebook: String
        twitter: String
        linkedIn: String
        frontpage: Boolean
    ): Sponsor

    deleteSponsor(id: ID!): Sponsor

    createPartner(
        name: String!
        ranking: String!
        index: Int!
        logo: String!
        description: String!
        website: String
        instagram: String
        facebook: String
        twitter: String
        linkedIn: String
        frontpage: Boolean
    ): Sponsor!

    updatePartner(
        id: ID!
        name: String!
        ranking: String!
        index: Int!
        logo: String!
        description: String!
        website: String
        instagram: String
        facebook: String
        twitter: String
        linkedIn: String
        frontpage: Boolean
    ): Sponsor

    deletePartner(id: ID!): Sponsor

    createSession(
        title: String!
        theme: String!
        start: String!
        end: String!
        day: String!
        host: String
        speakers: [String!]
        overview: String
        learnings: String
        supporters: [String]
        sponsors: [String]
    ): Session!

    updateSession(
        id: ID!
        title: String!
        theme: String!
        start: String!
        end: String!
        day: String!
        host: String
        speakers: [String]
        overview: String
        learnings: String
        supporters: [String]
        sponsors: [String]
    ): Session!

    createHostSpeaker(
        headshot: String
        name: String
        title: String
        company: String
        bio: String
        linkedIn: String
        insta: String
        facebook: String
        twitter: String
        website: String
        frontpage: Boolean
        index: Int
    ): HostSpeaker!

    updateHostSpeaker(
        id: ID!
        headshot: String
        name: String
        title: String
        company: String
        bio: String
        linkedIn: String
        insta: String
        facebook: String
        twitter: String
        website: String
        frontpage: Boolean
        index: Int
    ): HostSpeaker!

    deleteHostSpeaker(id: ID!): HostSpeaker!
}

type Query {
    users: [User]!
    user: User
    advComs(orderBy: AdvComOrderByInput): [AdvCom]!
    advCom(where: AdvComWhereUniqueInput!): AdvCom
    sponsors(where: SponsorWhereInput, orderBy: SponsorOrderByInput): [Sponsor]!
    sponsor(where: SponsorWhereUniqueInput!): Sponsor
    partners(where: PartnerWhereInput, orderBy: PartnerOrderByInput): [Partner]!
    partner(where: PartnerWhereUniqueInput!): Partner
    # sessions(where: SesionWhereInput, orderBy: SesionOrderByInput): [Session]!
    sessions(
        where: SessionWhereInput
        orderBy: SessionOrderByInput!
    ): [Session]!
    session(where: SessionWhereUniqueInput!): Session

    hostSpeakers(
        where: HostSpeakerWhereInput
        orderBy: HostSpeakerOrderByInput
    ): [HostSpeaker]!
    hostSpeaker(where: HostSpeakerWhereUniqueInput!): HostSpeaker
}
